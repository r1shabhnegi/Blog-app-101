// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String @db.VarChar(20)
  email String @unique 
  password String
  bio String?
  avatar String?
  posts Post[]
  createdAt DateTime @default(now())
  readingHistory Post[] @relation("readingHistory")
  about String? @default("")
  savedPosts SavedPost[]
  comments Comment[]
  follower Follows[] @relation("follower")
  following Follows[] @relation("following")
  refreshToken String[]
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  userId    String
  postId    String
  user User @relation(fields: [userId],references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, postId])
}

model Post {
  id String @id @default(uuid())
  title String
  content String
  authorId String
  authorName String
  authorAvatar String
  previewImage String
  author User @relation(fields: [authorId], references: [id])
  claps Int @default(0)
  createdAt DateTime @default(now())
  readTime Int @default(0)
  readBy User[] @relation("readingHistory")
  comments Comment[]
  tag String
}

model Comment {
  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  autherId String
  author User @relation(fields: [autherId],references: [id])
  postId String
  post Post @relation(fields: [postId],references: [id])
  clap Int @default(0)
}

model Follows {
  id String @id @default(uuid())
  followerId String
  followingId String
  follower User @relation("follower",fields: [followerId],references: [id])
  following User @relation("following",fields: [followingId],references: [id])
}

model Tag {
  id String @id @default(uuid())
  name String @unique
}